package backingform.validator;

import backingform.RequestBackingForm;
import controller.UtilController;
import model.request.Request;
import org.apache.commons.lang3.StringUtils;
import org.springframework.validation.Errors;
import org.springframework.validation.ValidationUtils;
import org.springframework.validation.Validator;
import utils.CustomDateFormatter;
import viewmodel.RequestViewModel;

import java.util.Arrays;
import java.util.Date;

public class RequestBackingFormValidator implements Validator {

  private Validator validator;
  private UtilController utilController;

  public RequestBackingFormValidator(Validator validator, UtilController utilController) {
    super();
    this.validator = validator;
    this.utilController = utilController;
  }

  @SuppressWarnings("unchecked")
  @Override
  public boolean supports(Class<?> clazz) {
    return Arrays.asList(RequestBackingForm.class, Request.class, RequestViewModel.class).contains(clazz);
  }

  @Override
  public void validate(Object obj, Errors errors) {
    if (obj == null)
      return;
    if (validator != null)
      ValidationUtils.invokeValidator(validator, obj, errors);
    RequestBackingForm form = (RequestBackingForm) obj;
    String requestDate = form.getRequestDate();
    if (!CustomDateFormatter.isDateTimeStringValid(requestDate)) {
      errors.rejectValue("request.requestDate", "dateFormat.incorrect",
              CustomDateFormatter.getDateTimeErrorMessage());
    }
    String requiredDate = form.getRequiredDate();
    if (!CustomDateFormatter.isDateStringValid(requiredDate)) {
      errors.rejectValue("request.requiredDate", "dateFormat.incorrect",
              CustomDateFormatter.getDateErrorMessage());
    }

    updateAutogeneratedFields(form);
    if (utilController.isDuplicateRequestNumber(form.getRequest()))
      errors.rejectValue("request.requestNumber", "requestNumber.nonunique",
              "There exists a request with the same request number.");

    utilController.commonFieldChecks(form, "request", errors);
  }

  private void updateAutogeneratedFields(RequestBackingForm form) {
    if (StringUtils.isBlank(form.getRequestNumber()) &&
            utilController.isFieldAutoGenerated("request", "requestNumber")) {
      form.setRequestNumber(utilController.getNextRequestNumber());
    }
    if (StringUtils.isBlank(form.getRequestDate()) &&
            utilController.doesFieldUseCurrentTime("request", "requestDate")) {
      form.getRequest().setRequestDate(new Date());
    }
  }
}
