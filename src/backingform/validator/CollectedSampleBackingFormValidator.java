package backingform.validator;

import java.lang.reflect.InvocationTargetException;
import java.util.Arrays;
import java.util.Date;
import java.util.Map;

import model.collectedsample.CollectedSample;
import model.collectedsample.CollectionConstants;
import model.collectionbatch.CollectionBatch;
import model.donor.Donor;
import model.donor.DonorStatus;
import model.location.Location;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.validation.Errors;
import org.springframework.validation.ValidationUtils;
import org.springframework.validation.Validator;

import utils.CustomDateFormatter;
import viewmodel.CollectedSampleViewModel;
import backingform.CollectedSampleBackingForm;
import controller.UtilController;

public class CollectedSampleBackingFormValidator implements Validator {

  private Validator validator;
  private UtilController utilController;

  public CollectedSampleBackingFormValidator(Validator validator, UtilController utilController) {
    super();
    this.validator = validator;
    this.utilController = utilController;
  }

  @SuppressWarnings("unchecked")
  @Override
  public boolean supports(Class<?> clazz) {
    return Arrays.asList(CollectedSampleBackingForm.class,
                         CollectedSample.class,
                         CollectedSampleViewModel.class
                         ).contains(clazz);
  }

  @Override
  public void validate(Object obj, Errors errors) {
    if (obj == null || validator == null)
      return;

    ValidationUtils.invokeValidator(validator, obj, errors);

    CollectedSampleBackingForm form = (CollectedSampleBackingForm) obj;
    updateAutoGeneratedFields(form);

    CollectedSample collectedSample = form.getCollectedSample();
    if (utilController.isDuplicateCollectionNumber(collectedSample))
      errors.rejectValue("collectedSample.collectionNumber", "collectionNumber.nonunique",
          "There exists a collection with the same collection number.");

    Long collectedOn = form.getCollectedOn();
//    if (!CustomDateFormatter.isDateStringValid(collectedOn))
//      errors.rejectValue("collectedSample.collectedOn", "dateFormat.incorrect",
//          CustomDateFormatter.getDateErrorMessage());
    
    Long bleedStartTime = form.getBleedStartTime();
//    if (!CustomDateFormatter.isTimeStringValid(bleedStartTime))
//      errors.rejectValue("collectedSample.bleedStartTime", "timeFormat.incorrect",
//          CustomDateFormatter.getTimeErrorMessage());
    
    Long bleedEndTime = form.getBleedEndTime();
//    if (!CustomDateFormatter.isTimeStringValid(bleedEndTime))
//      errors.rejectValue("collectedSample.bleedEndTime", "timeFormat.incorrect",
//          CustomDateFormatter.getTimeErrorMessage());

    updateRelatedEntities(form);
    inheritParametersFromCollectionBatch(form, errors);
    Donor donor = form.getDonor();
    if (donor != null) {
      String errorMessageDonorAge = utilController.verifyDonorAge(donor.getBirthDate());
      if (StringUtils.isNotBlank(errorMessageDonorAge))
        errors.rejectValue("collectedSample.donor", "donor.age", errorMessageDonorAge);
      
      String errorMessageDonorDeferral = utilController.isDonorDeferred(donor);
      if (StringUtils.isNotBlank(errorMessageDonorDeferral))
        errors.rejectValue("collectedSample.donor", "donor.deferral", errorMessageDonorDeferral);
      
      if (donor.getDonorStatus().equals(DonorStatus.POSITIVE_TTI))
        errors.rejectValue("collectedSample.donor", "donor.tti", "Donor is not allowed to donate.");
    }

    if(collectedSample.getBleedStartTime() != null || collectedSample.getBleedEndTime() != null){
        validateBleedTimes(collectedSample.getBleedStartTime(), collectedSample.getBleedEndTime(), errors);
    }

    Location donorPanel = form.getCollectedSample().getDonorPanel();
    if (donorPanel == null) {
      errors.rejectValue("collectedSample.donorPanel", "donorPanel.empty",
        "Donor Panel is required.");
    } 
    else if (utilController.isDonorPanel(donorPanel.getId()) == false) {
      errors.rejectValue("collectedSample.donorPanel", "donorPanel.invalid",
    	"Location is not a Donor Panel.");
    } 

    validateBloodPressure(form,errors);
    utilController.commonFieldChecks(form, "collectedSample", errors);
  }
  
  public void validateBleedTimes(Date bleedStartTime, Date bleedEndTime, Errors errors){
      if(bleedStartTime == null){
          errors.rejectValue("collectedSample.bleedStartTime", "", "This is required");
          return;
      }
      if(bleedEndTime == null){
          errors.rejectValue("collectedSample.bleedEndTime", "", "This is required");
          return;
      }
      if(bleedStartTime.after(bleedEndTime))
          errors.rejectValue("collectedSample", "", "Bleed End time should be after start time");

  }
  private void validateBloodPressure(CollectedSampleBackingForm collectionForm, Errors errors)
  {
	 Integer bloodPressureSystolic = null;
         Integer bloodPressureDiastolic = null;
         
         if(collectionForm.getBloodPressureSystolic() != null)
             bloodPressureSystolic = collectionForm.getBloodPressureSystolic();
         
         if(collectionForm.getBloodPressureDiastolic() != null)
             bloodPressureDiastolic = collectionForm.getBloodPressureDiastolic();

	
	 if( bloodPressureSystolic != null || bloodPressureDiastolic != null)
	  {
		 
		   if(bloodPressureSystolic == null || !( bloodPressureSystolic >= CollectionConstants.BLOOD_PRESSURE_MIN_VALUE && 
                         bloodPressureSystolic  <= CollectionConstants.BLOOD_PRESSURE_SYSTOLIC_MAX_VALUE))
			  		errors.rejectValue("collectedSample.bloodPressureSystolic","bloodPressureSystolic.incorrect" ,"Enter a value between 0 to 250.");
	             
	
			  	if(bloodPressureDiastolic == null || !( bloodPressureDiastolic >= CollectionConstants.BLOOD_PRESSURE_MIN_VALUE && 
                                        bloodPressureDiastolic <= CollectionConstants.BLOOD_PRESSURE_DIASTOLIC_MAX_VALUE))
			  		errors.rejectValue("collectedSample.bloodPressureDiastolic","bloodPressureDiastolic.incorrect" ,"Enter a value between 0 to 150.");
	  }
	  return;
			  
  }
		 

  
  private void inheritParametersFromCollectionBatch(
      CollectedSampleBackingForm form, Errors errors) {
    if (form.getUseParametersFromBatch()) {
      CollectionBatch collectionBatch = form.getCollectionBatch();
      if (collectionBatch == null) {
        errors.rejectValue("collectedSample.collectionBatch", "collectionbatch.notspecified", "Collection batch should be specified");
        return;
      }
    }
  }

  private void updateAutoGeneratedFields(CollectedSampleBackingForm form) {
    if (StringUtils.isBlank(form.getCollectionNumber()) &&
        utilController.isFieldAutoGenerated("collectedSample", "collectionNumber")) {
      form.setCollectionNumber(utilController.getNextCollectionNumber());
    }
    if (form.getCollectedOn() == null &&
        utilController.doesFieldUseCurrentTime("collectedSample", "collectedOn")) {
      form.getCollectedSample().setCollectedOn(new Date());
    }
  }
  


  @SuppressWarnings("unchecked")
  private void updateRelatedEntities(CollectedSampleBackingForm form) {
    Map<String, Object> bean = null;
    try {
      bean = BeanUtils.describe(form);
      Donor donor = utilController.findDonorInForm(bean);
      form.setDonor(donor);
      CollectionBatch collectionBatch = utilController.findCollectionBatchInForm(bean);
      form.setCollectionBatch(collectionBatch);
    } catch (IllegalAccessException e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    } catch (InvocationTargetException e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    } catch (NoSuchMethodException e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    }
  }

}
